                                                GRADER

Name of student running submit: Eric Wu
Login of student running submit: cs61b-gk

Second team member's name: Mukund Chillakanti
Second team member's login: cs61b-vs

Third team member's name (if any): Lisang Zhou                            
Third team member's login: cs61b-gl

IMPORTANT:  Once you've submitted Project 2 once, the same team member should
submit always.  If a different teammate must submit, inform cs61b@cory.eecs of
all the details.  Include a complete list of team members, and let us know
which submission you want graded.

If you've submitted your project once, or even written a substantial amount of
code together, you may not change partners without the permission of the
instructor.
===============================================================================
Does your program compile without errors?
Yes

Have you tested your program on the machines in the Soda CS 61B lab?
Yes

Did you successfully implement game tree search?  Did you successfully
implement alpha-beta pruning?  Are there any limitations on it?  What is the
default number of search levels set by the one-parameter MachinePlayer
constructor?
Yes, with alpha-beta pruning. The default search depth is 4. 

Describe your board evaluation function in some detail.

The evaluation function gives a maximum positive score to a win by the MachinePlayer, a minimum negative score to a win by the opponent,
and an intermediate score to a board where neither player has completed a network. The function also assigns a higher score to a win 
in a shorter number of moves (for example a win in 1 move, versus a win in 3 moves). 

More specifically, If the network is complete for "this" player, a max score of "1000 + depth" is returned.
If the network is complete for the opponent, a min score of "-(1000 + depth)" is returned. 

To evaluate boards where no win exists, the evaluation function adds the number of computer connections for each chip and the number of computer pieces in goal squares.
From this value,it subtracts the number of opponent connections for each chip and the number of opponent pieces in goal squares.

Does your MachinePlayer use any special method of choosing the first few moves?
No, the evaluation function chooses every move in the same way. However, by adding value to boards which contain computer pieces in goal squares, the first few 
moves by the MachinePlayer are typically placed in the goals.

Is there anything else the graders should know to help them read your project?
Nothing


Describe the classes, modules, and interfaces you designed before and while you
implemented the project.  Your description should include:
  -  A list of the classes your program uses.
  -  A list of each of the "modules" used in or by MachinePlayer, similar to
     the list in the "Teamwork" section of the README (but hopefully more
     detailed).
  -  For each module, list the class(es) the module is implemented in.
  -  For each module, say which of your team members implemented it.
  -  For each module, describe its interface--specifically, the prototype and
     behavior of each method that is available for external callers (outside
     the module) to call.  Don't include methods that are only meant to be
     called from within the module.

     For each method, provide (1) a method prototype and (2) a complete,
     unambiguous description of the behavior of the method/module.  This
     description should also appear before the method in your code's comments.

You will probably need to change some of your design decisions as you go; be
sure to modify this file to reflect these changes before you submit your
project.  Your design of classes and interfaces with be worth about 10% of your
grade.


/* classes */
* MachinePlayer - Class to represent the machine player. The minimax algorithm and evaluation function are implemented in this class
* Board - A class to hold the game board data. This class implements all of the rules for Network and also checks if there is a fully formed network on the board.
* DList
* DListNode
* InvalidNodeException
* Coordinate - An class representing positions on the board
* EvaluatedMove - A class containing a possible Move, and the value of the Move as evaluated by the evaluation function
* Move
* Player

/* Modules */
   ## NAME: game board                                    
   ## IMPLEMENTATED BY: Mukund Chillakanti  
   ## IMPLEMENTATED IN: Board
   ## DESCRIPTION: The module forms the structure and operations of the board.
                   It contains methods for the normal functionality of the board (ie. updating the board with a player move)
                   It also determines the legality of the moves and can generate all possible moves for a player. 
   ## INTERFACE:   
   /**
   *  isValidMove(Move m, int player) determines whether the Move m is a valid move for the player to make. 
   *
   *  @param m is the move that the player wants to make.
   *  @param player is the player who wants to make the move.
   *  @return true is the move the player wants to make is valid. false otherwise.
   */
    public boolean isValidMove(Move m, int player);

   /**
   *  makeMove(Move m, int player) makes a move for the specified player by updating the board. This move can either be an Add move or a Step Move. 
   *  It also increments either the number of whitePieces or blackPieces if an Add move is being made. This method does not check for the legality of the move.
   *
   *  @param m is the Move being made.
   *  @param player is the player whose piece is being moved (BLACK or WHITE).
   *  @return true if a move is successfully made. false if not (i.e. m.moveKind is neither an add move nor a step move).
   */
    protected boolean makeMove(Move m, int player);

   /**
   *  undoMove (Move m, int player) undoes a move by reversing a move and updating the board. This move can either be an Add move or a Step Move.
   *  It also decrements either the number of whitePieces or blackPieces if an Add move is being undone. This method does not check for the legality of the move.
   *  
   *  @param m is the move that the player wants to undo.
   *  @param player is the player whose move is being undone (BLACK or WHITE).
   *  @return true if a move is successfully undone. false otherwise.
   */
    protected boolean undoMove(Move m, int player);

    /**
   *  generateAllPossibleMoves(int player) generates a DList of all the possible moves that the player can make on the current board. 
   *  If the number of add moves the player has remaining is greater than 0, add moves will be added to the DList. Otherwise, step moves will be added.
   *  
   *  @param player is the player (BLACK or WHITE) whose possible moves are being found.
   *  @return DList of all the valid moves the the player can make.
   */
    protected DList generateAllPossibleMoves(int player);
       
    


   ## NAME: network complete                                 
   ## IMPLEMENTATED BY: Eric Wu  
   ## IMPLEMENTATED IN: Board
   ## DESCRIPTION:The module is used to determines whether a player has formed a network. 
   ## INTERFACE:   
   /**
     * isNetworkComplete(int player) determines whether player has formed a
     * complete network
     * 
     * @param player
     *          is the player whose possible networks this method is checking
     **/
    public boolean isNetworkComplete(int player);

   



   ## NAME: all connections                                     
   ## IMPLEMENTATED BY: Eric Wu  
   ## IMPLEMENTATED IN: Board
   ## DESCRIPTION: Generate a DList that contains all coordinates which connect to c.  
   ## INTERFACE:   
   /**
   *  getAllConnections(int player, Coordinate c) generates a DList containing all the coordinates that have pieces connected to the piece in Coordinate c.
   *  
   *  @param c is a Coordinate of the piece whose connections are being found
   *  @param player is the player (BLACK or WHITE) whose connections are being found.
   *  @return DList of all the coordinates that form connections with the given coordinate and player.
   */
    protected DList getAllConnections(int player, Coordinate c);   





   ## NAME: evaluation                                     
   ## IMPLEMENTATED BY:  Mukund Chillakanti ; Eric Wu ; Lisang Zhou
   ## IMPLEMENTATED IN: MachinePlayer
   ## DESCRIPTION: Evaluates a board and assigns a maximum positive score to MachinePlayer victory and a minimum score to
                   opponent victory
   ## INTERFACE:
   /**
     * evaluateMove(Board b, int depth), evaluates a board, assigning a score to it. It assigns a maximum
     * positive score to a win by the MachinePlayer, a minimum negative score to
     * win by the opponent, and an intermediate score to a board where neither player has completed a network. 
     * The evaluation function also assigns a higher score to a win in a shorter number of moves (for example a win in 1 move, versus a win in 3 moves).
     * To evaluate boards where no win exists, the evaluation function adds the number of computer connections for each chip and the number of computer pieces 
     * in goal squares. From this value, it subtracts the number of opponent connections for each chip and the number of opponent pieces in goal squares.
     * 
     * @param b: the Board object being evaluated
     * @param depth: depth at which the Board b is reached
     * @return a double that is the evaluated score of the board b. 
     **/
    private double evaluateMove(Board b, int depth)
   
  



   ## NAME: miniMax                                  
   ## IMPLEMENTATED BY:  Mukund Chillakanti ; Lisang Zhou
   ## IMPLEMENTATED IN: MachinePlayer
   ## DESCRIPTION: miniMax finds best move on the game tree. Uses Alpha Beta Pruning.
   ## INTERFACE:
   /** miniMax is a private function that finds the best move on the game tree. Uses Alpha Beta Pruning. 
     *  @param color: color being searched 
     *  @param depth: the depth intended for searching
     *  @param alpha: score that the computer knows with certainty it can achieve
     *  @param beta:  the opponent can achieve a score of beta or lower.
     *  @return an EvaluatedMove object that contains the move and value of the best possible move.
     **/
    private EvaluatedMove miniMax(int color, int depth, double alpha, double beta)


