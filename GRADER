                                     GRADER

Name of student running submit: Eric Wu
Login of student running submit: cs61b-gk

Second team member's name: Mukund Chillakanti
Second team member's login: cs61b-vs

Third team member's name (if any): Lisang Zhou                            
Third team member's login: cs61b-gl

IMPORTANT:  Once you've submitted Project 2 once, the same team member should
submit always.  If a different teammate must submit, inform cs61b@cory.eecs of
all the details.  Include a complete list of team members, and let us know
which submission you want graded.

If you've submitted your project once, or even written a substantial amount of
code together, you may not change partners without the permission of the
instructor.
===============================================================================
Does your program compile without errors?
Yes

Have you tested your program on the machines in the Soda CS 61B lab?
Yes

Did you successfully implement game tree search?  Did you successfully
implement alpha-beta pruning?  Are there any limitations on it?  What is the
default number of search levels set by the one-parameter MachinePlayer
constructor?
Yes, with alpha-beta pruning. The default search depth is 4. 

Describe your board evaluation function in some detail.

The evaluation function gives a maximum positive score to a win by the MachinePlayer, a minimum negative score to a win by the opponent,
and an intermediate score to a board where neither player has completed a network. The function also assigns a higher score to a win 
in a shorter number of moves (for example a win in 1 move, versus a win in 3 moves). 

More specifically, If the network is complete for "this" player, a max score of "1000 + depth" is returned.
If the network is complete for the opponent, a min score of "-(1000 + depth)" is returned. 

To evaluate boards where no win exists, the evaluation function adds the number of computer connections for each chip and the number of computer pieces in goal squares.
From this value,it subtracts the number of opponent connections for each chip and the number of opponent pieces in goal squares.

Does your MachinePlayer use any special method of choosing the first few moves?
No, the evaluation function chooses every move in the same way. However, by adding value to boards which contain computer pieces in goal squares, the first few 
moves by the MachinePlayer are typically placed in the goals.

Is there anything else the graders should know to help them read your project?
Nothing


Describe the classes, modules, and interfaces you designed before and while you
implemented the project.  Your description should include:
  -  A list of the classes your program uses.
  -  A list of each of the "modules" used in or by MachinePlayer, similar to
     the list in the "Teamwork" section of the README (but hopefully more
     detailed).
  -  For each module, list the class(es) the module is implemented in.
  -  For each module, say which of your team members implemented it.
  -  For each module, describe its interface--specifically, the prototype and
     behavior of each method that is available for external callers (outside
     the module) to call.  Don't include methods that are only meant to be
     called from within the module.

     For each method, provide (1) a method prototype and (2) a complete,
     unambiguous description of the behavior of the method/module.  This
     description should also appear before the method in your code's comments.

You will probably need to change some of your design decisions as you go; be
sure to modify this file to reflect these changes before you submit your
project.  Your design of classes and interfaces with be worth about 10% of your
grade.
